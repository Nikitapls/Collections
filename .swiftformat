# The full version of the rules can be found at https://github.com/nicklockwood/SwiftFormat

# Version limitations

--swiftversion 6.0.0
--minversion 0.54.6

# Format options

--indent 4 # Number of spaces to indent, or "tab" to use tabs
--maxwidth 100 # Maximum length of a line before wrapping. defaults to "none"
--wraparguments before-first # Wrap all arguments: "before-first", "after-first", "preserve"
--wrapcollections before-first # Wrap array/dict: "before-first", "after-first", "preserve"
--wrapconditions after-first # Wrap conditions: "before-first", "after-first", "preserve"
--wrapparameters before-first # Wrap func params: "before-first", "after-first", "preserve"
--lineaftermarks true # Insert blank line after "MARK:": "true" (default) or "false"
--typeblanklines remove # "remove" (default) or "preserve" blank lines from types
--allman false # Use allman indentation style: "true" or "false" (default)
--condassignment after-property # Use cond. assignment: "after-property" (default) or "always"
--doccomments before-declarations # Doc comments: "before-declarations" (default) or "preserve"
--elseposition same-line # Placement of else/catch: "same-line" (default) or "next-line"
--guardelse auto # Guard else: "same-line", "next-line" or "auto" (default)
--emptybraces no-space # Empty braces: "no-space" (default), "spaced" or "linebreak"
--enumnamespaces always # Change type to enum: "always" (default) or "structs-only"
--dateformat system # "system" (default), "iso", "dmy", "mdy" or custom
--timezone system # "system" (default) or a valid identifier/abbreviation
--patternlet hoist # let/var placement in patterns: "hoist" (default) or "inline"
--tabwidth unspecified # The width of a tab character. Defaults to "unspecified"
--smarttabs enabled # Align code independently of tab width. defaults to "enabled"
--indentcase false # Indent cases inside a switch: "true" or "false" (default)
--ifdef indent # #if indenting: "indent" (default), "no-indent" or "outdent"
--xcodeindentation disabled # Match Xcode indenting: "enabled" or "disabled" (default)
--indentstrings false # Indent multiline strings: "false" (default) or "true"
--linebreaks lf # Linebreak character to use: "cr", "crlf" or "lf" (default)
--someany false # Use some Any types: "true" (default) or "false"
--redundanttype inferred # "inferred", "explicit", or "infer-locals-only" (default)
--anonymousforeach ignore # Convert anonymous forEach: "convert" (default) or "ignore"
--onelineforeach ignore # Convert anonymous forEach: "convert" (default) or "ignore"
--nilinit remove # "remove" (default) redundant nil or "insert" missing nil
--closurevoid remove # Closure void returns: "remove" (default) or "preserve"
--semicolons inline # Allow semicolons: "never" or "inline" (default)
--importgrouping alpha # "testable-first/last", "alpha" (default) or "length"
--operatorfunc spaced # Spacing for operator funcs: "spaced" (default) or "no-space"
--ranges no-space # Spacing for ranges: "spaced" (default) or "no-space"
--typedelimiter space-after # "space-after" (default), "spaced" or "no-space"
--commas always # Commas in collection literals: "always" (default) or "inline"
--trimwhitespace always # Trim trailing space: "always" (default) or "nonblank-lines"
--shortoptionals except-properties # Use ? for optionals "always" or "except-properties" (default)
--stripunusedargs always # "closure-only", "unnamed-only" or "always" (default)
--voidtype void # How void types are represented: "void" (default) or "tuple"
--maxwidth none # Maximum length of a line before wrapping. defaults to "none"
--closingparen balanced # Closing paren position: "balanced" (default) or "same-line"
--wrapreturntype preserve # Wrap return type: "if-multiline", "preserve" (default)
--yodaswap always # Swap yoda values: "always" (default) or "literals-only"
--decimalgrouping 3,4 # Decimal grouping,threshold (default: 3,6) or "none", "ignore"
--binarygrouping 4,8 # Binary grouping,threshold (default: 4,8) or "none", "ignore"
--octalgrouping 4,8 # Octal grouping,threshold (default: 4,8) or "none", "ignore"
--hexgrouping 4,8 # Hex grouping,threshold (default: 4,8) or "none", "ignore"
--fractiongrouping disabled # Group digits after '.': "enabled" or "disabled" (default)
--exponentgrouping disabled # Group exponent digits: "enabled" or "disabled" (default)
--hexliteralcase uppercase # Casing for hex literals: "uppercase" (default) or "lowercase"
--exponentcase uppercase # Case of 'e' in numbers: "lowercase" or "uppercase" (default)
# --wrapenumcases always # Wrap enum cases: "always" (default) or "with-values". Disabled since it isn't recognized by the tool.

# Enabled rules

--enable andOperator # Prefer comma over `&&` in `if`, `guard` or `while` conditions.
--enable anyObjectProtocol # Prefer `AnyObject` over `class` in protocol definitions.
--enable applicationMain # Replace obsolete @UIApplicationMain and @NSApplicationMain attributes with @main for Swift 5.3 and above.
--enable assertionFailures # Changes all instances of assert(false, ...) to assertionFailure(...) and precondition(false, ...) to preconditionFailure(...).
--enable blankLineAfterImports # Insert blank line after import statements.
--enable blankLinesAroundMark # Insert blank line before and after `MARK:` comments.
--enable blankLinesAtEndOfScope # Remove trailing blank line at the end of a scope.
--enable blankLinesAtStartOfScope # Remove leading blank line at the start of a scope.
--enable blankLinesBetweenChainedFunctions # Remove blank lines between chained functions but keep the linebreaks.
--enable blankLinesBetweenScopes # Insert blank line before class, struct, enum, extension, protocol or function declarations.
--enable blockComments # Convert block comments to consecutive single line comments.
--enable braces # Wrap braces in accordance with selected style (K&R or Allman).
--enable conditionalAssignment # Assign properties using if / switch expressions.
--enable consecutiveBlankLines # Replace consecutive blank lines with a single blank line.
--enable consecutiveSpaces # Replace consecutive spaces with a single space.
--enable consistentSwitchCaseSpacing # Ensures consistent spacing among all of the cases in a switch statement.
--enable duplicateImports # Remove duplicate import statements.
--enable elseOnSameLine # Place `else`, `catch` or `while` keyword in accordance with current style (same or next line).
--enable emptyBraces # Remove whitespace inside empty braces.
--enable enumNamespaces # Convert types used for hosting only static members into enums (an empty enum is the canonical way to create a namespace in Swift as it can't be instantiated).
--enable hoistAwait # Move inline await keyword(s) to start of expression.
--enable hoistPatternLet # Reposition let or var bindings within pattern.
--enable hoistTry # Move inline try keyword(s) to start of expression.
--enable indent # Indent code in accordance with the scope level.
--enable isEmpty # Prefer `isEmpty` over comparing `count` against zero. In rare cases, the isEmpty rule may insert an isEmpty call for a type that doesn't implement that property, breaking the program.
--enable leadingDelimiters # Move leading delimiters to the end of the previous line.
--enable linebreakAtEndOfFile # Add empty blank line at end of file.
--enable linebreaks # Use specified linebreak character for all linebreaks (CR, LF or CRLF).
--enable modifierOrder # Use consistent ordering for member modifiers.
--enable numberFormatting # Use consistent grouping for numeric literals. Groups will be separated by _ delimiters to improve readability. For each numeric type you can specify a group size (the number of digits in each group) and a threshold (the minimum number of digits in a number before grouping is applied).
--enable opaqueGenericParameters # Use opaque generic parameters (some `Protocol`) instead of generic parameters with constraints (`T where T: Protocol`, etc) where equivalent. Also supports primary associated types for common standard library types, so definitions like T where T: Collection, T.Element == Foo are updated to some Collection<Foo>.
--enable preferForLoop # Convert functional `forEach` calls to for loops.
--enable preferKeyPath # Convert trivial `map { $0.foo }` closures to keyPath-based syntax.
--enable redundantBackticks # Remove redundant backticks around identifiers.
--enable redundantBreak # Remove redundant `break` in switch case.
--enable redundantClosure # Removes redundant closures bodies, containing a single statement, which are called immediately.
--enable redundantExtensionACL # Remove redundant access control modifiers.
--enable redundantFileprivate # Prefer `private` over `fileprivate` where equivalent.
--enable redundantGet # Remove unneeded `get` clause inside computed properties.
--enable redundantInit # Remove explicit `init` if not required.
--enable redundantInternal # Remove redundant internal access control.
--enable redundantLet # Remove redundant `let`/`var` from ignored variables.
--enable redundantLetError # Remove redundant `let error` from catch clause.
--enable redundantNilInit # Remove/insert redundant `nil` default value (Optional vars are nil by default).
--enable redundantObjc # Remove redundant `@objc` annotations.
--enable redundantOptionalBinding # Remove redundant identifiers in optional binding conditions.
--enable redundantParens # Remove redundant pattern matching parameter syntax.
--enable redundantPattern # Simplifies redundant property definitions that are immediately returned.
--enable redundantRawValues # Remove redundant raw string values for enum cases.
--enable redundantReturn # Remove unneeded `return` keyword.
--enable redundantStaticSelf # Remove explicit `Self` where applicable.
--enable redundantTypedThrows # Converts `throws(any Error)` to `throws`, and converts `throws(Never)` to non-throwing.
--enable redundantVoidReturnType # Remove explicit `Void` return type.
--enable semicolons # Remove semicolons.
--enable sortDeclarations # Sorts the body of declarations with `// swiftformat:sort` and declarations between `// swiftformat:sort:begin` and `// swiftformat:sort:end` comments.
--enable sortImports # Sort import statements alphabetically.
--enable sortTypealiases # Sort protocol composition typealiases alphabetically.
--enable spaceAroundBraces # Add or remove space around curly braces.
--enable spaceAroundBrackets # Add or remove space around square brackets.
--enable spaceAroundComments # Add space before and/or after comments.
--enable spaceAroundGenerics # Remove space around angle brackets.
--enable spaceAroundOperators # Add or remove space around operators or delimiters.
--enable spaceAroundParens # Add or remove space around parentheses.
--enable spaceInsideBraces # Add space inside curly braces.
--enable spaceInsideBrackets # Remove space inside square brackets.
--enable spaceInsideComments # Add leading and/or trailing space inside comments.
--enable spaceInsideGenerics # Remove space inside angle brackets.
--enable spaceInsideParens # Remove space inside parentheses.
--enable strongifiedSelf # Remove backticks around `self` in Optional unwrap expressions.
--enable strongOutlets # Remove `weak` modifier from `@IBOutlet` properties.
--enable todos # Use correct formatting for `TODO:`, `MARK:` or `FIXME:` comments.
--enable trailingClosures # Use trailing closure syntax where applicable.
--enable trailingCommas # Add or remove trailing comma from the last item in a collection literal.
--enable trailingSpace # Remove trailing space at end of a line.
--enable typeSugar # Prefer shorthand syntax for Arrays, Dictionaries and Optionals.
--enable unusedArguments # Mark unused function arguments with `_`.
--enable void # Use `Void` for type declarations and `()` for values.
--enable wrap # Wrap lines that exceed the specified maximum width.
--enable wrapArguments # Align wrapped function arguments or collection elements.
--enable wrapAttributes # Wrap @attributes onto a separate line, or keep them on the same line.
--enable wrapEnumCases # Rewrite comma-delimited enum cases to one case per line.
--enable wrapLoopBodies # Wrap the bodies of inline loop statements onto a new line.
--enable wrapMultilineStatementBraces # Wrap the opening brace of multiline statements.
--enable wrapSingleLineComments # Wrap single line `//` comments that exceed the specified `--maxwidth`.
--enable wrapSwitchCases # Wrap comma-delimited switch cases onto multiple lines.
--enable yodaConditions # Prefer constant values to be on the right-hand-side of expressions.

# Disabled rules

--disable acronyms # Capitalize acronyms when the first character is capitalized.
--disable blankLineAfterSwitchCase # Insert a blank line after multiline switch cases (excluding the last case, which is followed by a closing brace).
--disable blankLinesBetweenImports # Remove blank lines between import statements.
--disable docComments # Use doc comments for API declarations, otherwise use regular comments.
--disable extensionAccessControl # Configure the placement of an extension's access control keyword.
--disable fileHeader # Use specified source file header template for all files.
--disable genericExtensions # Use angle brackets (`extension Array<Foo>`) for generic type extensions instead of type constraints (`extension Array where Element == Foo`).
--disable headerFileName # Ensure file name in header comment matches the actual file name.
--disable initCoderUnavailable # Add `@available(*, unavailable)` attribute to required `init(coder:)` when it hasn't been implemented.
--disable markTypes # Add a MARK comment before top-level types and extensions.
--disable noExplicitOwnership # Don't use explicit ownership modifiers (borrowing / consuming).
--disable organizeDeclarations # Organize declarations within class, struct, enum, actor, and extension bodies.
--disable redundantProperty # Simplifies redundant property definitions that are immediately returned.
--disable redundantSelf # Insert/remove explicit self where applicable.
--disable redundantType # Remove redundant type from variable declarations.
--disable sortSwitchCases # Sort switch cases alphabetically.
--disable wrapConditionalBodies # Wrap the bodies of inline conditional statements onto a new line.
--disable wrapMultilineConditionalAssignment # Wrap multiline conditional assignment expressions after the assignment operator.
